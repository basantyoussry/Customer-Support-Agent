{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[],"dockerImageVersionId":30887,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/basantyoussry/customer-support-agnet?scriptVersionId=223225101\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# Customer-Support-Agent\nThis Customer Support Query Classification & Response Generation Model first classifies user queries into three categories: Order Issue, Payment Problem, and General Inquiry using a trained classifier. Based on the classification, it then generates a professional, natural-sounding response using LLaMA 2. The model ensures concise, helpful, and human-like replies while avoiding chatbot-like phrasing, making it ideal for automating customer support interactions.\n\nThis pipeline follows these steps:\n\n1️⃣ Query Classification:\n\nTrained a model on a small dataset consisting of two features: Query: The user's question or input. Category: The classification label with three possible classes: Order Issue Payment Problem General Inquiry Used Logistic Regression to classify the category of the query.\n\nUsed TF-IDF Vectorization to convert text queries into numerical format.\n\nEvaluated model performance using accuracy score and classification report.\n\n2️⃣ Response Generation:\n\nUsed LLaMA 2 to generate a response based on the classified category. Ensured responses are professional, natural, and helpful for customer support automation. This model efficiently automates customer service interactions by combining classification and text generation.","metadata":{}},{"cell_type":"markdown","source":"# Requirements\n\npandas\n\nscikit-learn\n\ntorch\n\ntransformers","metadata":{}},{"cell_type":"markdown","source":"# **Hugging Face Login & Model Access Instructions**\nIf you're running this on a different PC and need to access LLaMA 2, follow these steps:\n\n1️⃣ Visit the Model Page\n\nGo to LLaMA 2 on Hugging Face.\n2️⃣ Request Access\n\nClick \"Request Access\" and submit the form.\nApproval typically takes 5-10 minutes.\n3️⃣ Generate an Access Token\n\nOnce approved, go to Hugging Face Settings > Access Tokens.\nClick \"New Token\", give it a name, and set permissions to \"Write\".\n4️⃣ Grant Repository Permissions\n\nIn Repository Permissions, select LLaMA-2-7b-chat-hf to ensure access.","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import tree\nfrom sklearn.metrics import accuracy_score, classification_report\nimport torch\nfrom transformers import AutoTokenizer, AutoModelForCausalLM\nimport time\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-02-18T14:35:18.684641Z","iopub.execute_input":"2025-02-18T14:35:18.684944Z","iopub.status.idle":"2025-02-18T14:35:18.690015Z","shell.execute_reply.started":"2025-02-18T14:35:18.684917Z","shell.execute_reply":"2025-02-18T14:35:18.689217Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"data = [\n    {\"query\": \"Where is my order?\", \"category\": \"Order Issue\"},\n    {\"query\": \"I want a refund.\", \"category\": \"Payment Problem\"},\n    {\"query\": \"How long does shipping take?\", \"category\": \"General Inquiry\"},\n    {\"query\": \"Why was my card declined?\", \"category\": \"Payment Problem\"},\n    {\"query\": \"I received the wrong product.\", \"category\": \"Order Issue\"},\n    {\"query\": \"My order hasn't arrived yet.\", \"category\": \"Order Issue\"},\n    {\"query\": \"I was charged twice for my purchase.\", \"category\": \"Payment Problem\"},\n    {\"query\": \"Do you ship internationally?\", \"category\": \"General Inquiry\"},\n    {\"query\": \"Can I change my shipping address?\", \"category\": \"Order Issue\"},\n    {\"query\": \"When will I receive my refund?\", \"category\": \"Payment Problem\"},\n    {\"query\": \"What payment methods do you accept?\", \"category\": \"General Inquiry\"},\n    {\"query\": \"My package was damaged on arrival.\", \"category\": \"Order Issue\"},\n    {\"query\": \"I need to update my credit card details.\", \"category\": \"Payment Problem\"},\n    {\"query\": \"Do you offer discounts for bulk purchases?\", \"category\": \"General Inquiry\"},\n    {\"query\": \"The tracking number is not working.\", \"category\": \"Order Issue\"},\n    {\"query\": \"How do I cancel my order?\", \"category\": \"Order Issue\"},\n    {\"query\": \"Why was my payment declined?\", \"category\": \"Payment Problem\"},\n    {\"query\": \"Do you provide customer support on weekends?\", \"category\": \"General Inquiry\"},\n    {\"query\": \"Can I return an item I don’t like?\", \"category\": \"Order Issue\"},\n    {\"query\": \"How do I apply a discount code?\", \"category\": \"General Inquiry\"},\n    {\"query\": \"I was charged the wrong amount.\", \"category\": \"Payment Problem\"},\n    {\"query\": \"My order status hasn’t been updated.\", \"category\": \"Order Issue\"},\n    {\"query\": \"Can I pay with cryptocurrency?\", \"category\": \"General Inquiry\"},\n    {\"query\": \"Do you offer cash on delivery?\", \"category\": \"General Inquiry\"},\n    {\"query\": \"I received an empty package.\", \"category\": \"Order Issue\"},\n    {\"query\": \"How do I reset my account password?\", \"category\": \"General Inquiry\"},\n    {\"query\": \"I was charged after canceling my order.\", \"category\": \"Payment Problem\"},\n    {\"query\": \"How do I track my refund status?\", \"category\": \"Payment Problem\"},\n    {\"query\": \"I received a defective product.\", \"category\": \"Order Issue\"},\n    {\"query\": \"Is there a warranty on your products?\", \"category\": \"General Inquiry\"},\n    {\"query\": \"Can I split my payment into installments?\", \"category\": \"Payment Problem\"},\n    {\"query\": \"The website crashed while I was paying.\", \"category\": \"Payment Problem\"},\n    {\"query\": \"My order was delivered to the wrong address.\", \"category\": \"Order Issue\"},\n    {\"query\": \"How do I change my billing information?\", \"category\": \"Payment Problem\"},\n    {\"query\": \"What happens if I'm not home when my order arrives?\", \"category\": \"General Inquiry\"},\n    {\"query\": \"Do you offer gift wrapping?\", \"category\": \"General Inquiry\"},\n    {\"query\": \"How do I report a fraudulent charge?\", \"category\": \"Payment Problem\"},\n    {\"query\": \"Can I pre-order an item?\", \"category\": \"General Inquiry\"},\n    {\"query\": \"My package is stuck in customs.\", \"category\": \"Order Issue\"}\n]\n\n# Convert to DataFrame\ndf = pd.DataFrame(data)\n\n# Display the DataFrame\n# df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T14:35:21.922328Z","iopub.execute_input":"2025-02-18T14:35:21.922683Z","iopub.status.idle":"2025-02-18T14:35:21.93147Z","shell.execute_reply.started":"2025-02-18T14:35:21.922659Z","shell.execute_reply":"2025-02-18T14:35:21.930678Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Checking Data Balance \ndf[\"category\"].value_counts()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T14:35:24.981061Z","iopub.execute_input":"2025-02-18T14:35:24.981481Z","iopub.status.idle":"2025-02-18T14:35:24.997922Z","shell.execute_reply.started":"2025-02-18T14:35:24.981442Z","shell.execute_reply":"2025-02-18T14:35:24.997089Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Encode labels\nlabel_encoder = LabelEncoder()\ndf[\"category_encoded\"] = label_encoder.fit_transform(df[\"category\"])\nX=df[\"query\"]\ny=df[\"category_encoded\"]\n# Split dataset\nX_train, X_test, y_train, y_test = train_test_split(X,y ,test_size=0.2, random_state=42)\n\n# Convert text to TF-IDF vectors\nvectorizer = TfidfVectorizer()\nX_train_tfidf = vectorizer.fit_transform(X_train)\nX_test_tfidf = vectorizer.transform(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T14:35:27.31602Z","iopub.execute_input":"2025-02-18T14:35:27.316347Z","iopub.status.idle":"2025-02-18T14:35:27.344108Z","shell.execute_reply.started":"2025-02-18T14:35:27.31632Z","shell.execute_reply":"2025-02-18T14:35:27.343292Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# *Different Classifiaction Models*","metadata":{}},{"cell_type":"code","source":"# Training Logistic Regression Model\nmodel = LogisticRegression()\nmodel.fit(X_train_tfidf, y_train)\n\n# Predict on test set\ny_pred = model.predict(X_test_tfidf)\n\n# Evaluate performance\nprint(\"Accuracy:\", accuracy_score(y_test, y_pred))\nprint(\"Classification Report:\\n\", classification_report(y_test, y_pred, target_names=label_encoder.classes_))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T14:35:30.274078Z","iopub.execute_input":"2025-02-18T14:35:30.274357Z","iopub.status.idle":"2025-02-18T14:35:30.305443Z","shell.execute_reply.started":"2025-02-18T14:35:30.274335Z","shell.execute_reply":"2025-02-18T14:35:30.304625Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Training Decision Tree Model\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X_train_tfidf, y_train)\n# Predict on test set\ny_pred_clf = clf.predict(X_test_tfidf)\n\n# Evaluate performance\nprint(\"Accuracy:\", accuracy_score(y_test, y_pred_clf))\nprint(\"Classification Report:\\n\", classification_report(y_test, y_pred_clf, target_names=label_encoder.classes_))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T14:35:36.257369Z","iopub.execute_input":"2025-02-18T14:35:36.257722Z","iopub.status.idle":"2025-02-18T14:35:36.271875Z","shell.execute_reply.started":"2025-02-18T14:35:36.257696Z","shell.execute_reply":"2025-02-18T14:35:36.271236Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Training KNN Model\nfrom sklearn.neighbors import KNeighborsClassifier\nknn=KNeighborsClassifier(n_neighbors=5)\nknn.fit(X_train_tfidf, y_train)\ny_pred_knn = knn.predict(X_test_tfidf)\nprint(\"Accuracy:\", accuracy_score(y_test, y_pred_knn))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T14:35:39.701165Z","iopub.execute_input":"2025-02-18T14:35:39.701515Z","iopub.status.idle":"2025-02-18T14:35:39.748185Z","shell.execute_reply.started":"2025-02-18T14:35:39.70149Z","shell.execute_reply":"2025-02-18T14:35:39.747488Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Testing the model with new data\ndef classify_query(query):\n    query_tfidf = vectorizer.transform([query])\n    category_index = model.predict(query_tfidf)[0]\n    return label_encoder.inverse_transform([category_index])[0]\n\n# Test example\nprint(classify_query(\"My order is late\"))\nprint(classify_query(\"I have a problem\"))\nprint(classify_query(\"I was charged incorrectly\"))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T14:35:42.745914Z","iopub.execute_input":"2025-02-18T14:35:42.746216Z","iopub.status.idle":"2025-02-18T14:35:42.755142Z","shell.execute_reply.started":"2025-02-18T14:35:42.746189Z","shell.execute_reply":"2025-02-18T14:35:42.754211Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"In the above example, although the model's accuracy is not high, it performs well on new data. However, due to the limited dataset size, which consists of only 40 samples, the evaluation may not be fully representative.","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}},{"cell_type":"code","source":"# while True:\n#     query=input(\"How may I help you?\")\n#     print(classify_query(query))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T14:35:55.159445Z","iopub.execute_input":"2025-02-18T14:35:55.159721Z","iopub.status.idle":"2025-02-18T14:35:55.162751Z","shell.execute_reply.started":"2025-02-18T14:35:55.159701Z","shell.execute_reply":"2025-02-18T14:35:55.162056Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from huggingface_hub import login\nlogin()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T14:35:59.139756Z","iopub.execute_input":"2025-02-18T14:35:59.140023Z","iopub.status.idle":"2025-02-18T14:35:59.162078Z","shell.execute_reply.started":"2025-02-18T14:35:59.140003Z","shell.execute_reply":"2025-02-18T14:35:59.161373Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# *Using Llama 2-7b for generating the response***","metadata":{}},{"cell_type":"code","source":"from transformers import AutoModelForCausalLM, AutoTokenizer\nimport torch\n\ntoken = \"Place_Your_HuggingFace_Token_Here\"  # Don't expose in code\n\nmodel_name = \"meta-llama/Llama-2-7b-chat-hf\"  # Change if needed\n\ntokenizer = AutoTokenizer.from_pretrained(model_name, token=token)\nllm = AutoModelForCausalLM.from_pretrained(\n    model_name, torch_dtype=torch.float16, device_map=\"auto\", token=token\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T14:36:19.350892Z","iopub.execute_input":"2025-02-18T14:36:19.35117Z","iopub.status.idle":"2025-02-18T14:37:44.878043Z","shell.execute_reply.started":"2025-02-18T14:36:19.351149Z","shell.execute_reply":"2025-02-18T14:37:44.877154Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# *Testing the model***","metadata":{}},{"cell_type":"code","source":"def generate_response(query):\n    category = classify_query(query)\n    print(category)\n    # Define category-based prompts\n    prompts = {\n        \"Order Issue\": \"You are a professional Customer Support Agent. Use natural language and avoid chatbot-like responses. \"\n                       \"The user is experiencing an issue with their order. Respond professionally and helpfully.\",\n        \"Payment Problem\": \"You are a professional Customer Support Agent. Use natural language and avoid chatbot-like responses. \"\n                           \"The user has a payment-related issue. Guide them with possible solutions.\",\n        \"General Inquiry\": \"You are a professional Customer Support Agent. Use natural language and avoid chatbot-like responses. \"\n                           \"The user has a general question. Provide useful and concise information.\"\n    }\n    \n    # Format the prompt for LLaMA 2\n    full_prompt = f\"{prompts[category]}\\n\\nUser: {query}\\nSupport Agent:\"\n\n    # Tokenize and generate response\n    inputs = tokenizer(full_prompt, return_tensors=\"pt\").to(\"cuda\")\n    output = llm.generate(**inputs, max_length=100, temperature=0.7, top_p=0.9)\n\n    # Decode and return the response\n    response = tokenizer.decode(output[0], skip_special_tokens=True)\n    return response\n\n# Example Usage\nprint(generate_response(\"I want to track my order.\"))\nprint(generate_response(\"Why was my payment declined?\"))\nprint(generate_response(\"Do you offer international shipping?\"))\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-18T15:01:56.708454Z","iopub.execute_input":"2025-02-18T15:01:56.709146Z","iopub.status.idle":"2025-02-18T15:02:06.25373Z","shell.execute_reply.started":"2025-02-18T15:01:56.709116Z","shell.execute_reply":"2025-02-18T15:02:06.252936Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"After refining the prompt, I achieved a smooth and professional response that effectively assists the user.","metadata":{}}]}